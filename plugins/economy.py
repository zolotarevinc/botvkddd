import random
import os
import time
from datetime import datetime
from plugins import gf

users_dir = os.path.join(r"users/")

def bonus_time(id):
    get_data = gf.loadjson(users_dir + str(id) + ".json")
    if get_data['group'] == 'Player':
        return 86399
    elif get_data['group'] == 'VIP':
        return 43200
    elif get_data['group'] == 'Premium':
        return 21600

def economy(sourceText, id):
    if sourceText != '':
        if '–±–∞–ª–∞–Ω—Å' == sourceText.split()[0].lower():
            get_data = gf.loadjson(users_dir + str(id) + ".json")
            return ', –≤ –∫–æ—à–µ–ª—å–∫–µ: ' + get_data['balance'] + '‚Ç¨ üí∞'
        elif sourceText.split()[0].lower() in ['–±–æ–Ω—É—Å', 'üíé']:
            get_data = gf.loadjson(users_dir + str(id) + ".json")
            group = get_data['group']
            bonus_time_in = get_data['bonus_timer']
            if time.time() > float(bonus_time_in):
                if group == 'Player':
                    random_bonus = int(random.randint(1, 2))
                    if random_bonus == 1:
                        get_data = gf.loadjson(users_dir + str(id) + ".json")
                        BonusMoney = int(random.randint(5000, 15000))
                        user_balance = int(get_data['balance'])
                        goBonus = user_balance + BonusMoney
                        get_data.update({"balance": '{}'.format(str(goBonus))})
                        get_data.update({"bonus_timer": '{}'.format(time.time() + int(bonus_time(id)))})
                        gf.dumpjson(get_data, users_dir + str(id) + ".json")
                        return ', –≤–∞—à –±–æ–Ω—É—Å: ' + str(BonusMoney) + '‚Ç¨ üí∞'
                    else:
                        get_data = gf.loadjson(users_dir + str(id) + ".json")
                        BonusCoin = int(random.randint(5, 15))
                        user_coin_balance = int(get_data['bank_cr_balance'])
                        goBonus = user_coin_balance + BonusCoin
                        get_data.update({"bank_cr_balance": '{}'.format(goBonus)})
                        get_data.update({"bonus_timer": '{}'.format(time.time() + int(bonus_time(id)))})
                        gf.dumpjson(get_data, users_dir + str(id) + ".json")
                        return ', –≤–∞—à –±–æ–Ω—É—Å: ' + str(BonusCoin) + '‡∏ø üèÆ'
                elif group == 'VIP':
                    random_bonus = random.randint(1, 2)
                    if random_bonus == 1:
                        BonusMoney = int(random.randint(15000, 25000))
                        user_balance = int(get_data['balance'])
                        get_data = gf.loadjson(users_dir + str(id) + ".json")
                        goBonus = user_balance + BonusMoney
                        get_data.update({"balance": '{}'.format(goBonus)})
                        get_data.update({"bonus_timer": '{}'.format(time.time() + int(bonus_time(id)))})
                        gf.dumpjson(get_data, users_dir + str(id) + ".json")
                        return ', –≤–∞—à –±–æ–Ω—É—Å: ' + str(BonusMoney) + '‚Ç¨! üòÑ'
                    else:
                        BonusCoin = int(random.randint(10, 20))
                        user_coin_balance = int(get_data['bank_cr_balance'])
                        get_data = gf.loadjson(users_dir + str(id) + ".json")
                        goBonus = user_coin_balance + BonusCoin
                        get_data.update({"bank_cr_balance": '{}'.format(goBonus)})
                        get_data.update({"bonus_timer": '{}'.format(time.time() + int(bonus_time(id)))})
                        gf.dumpjson(get_data, users_dir + str(id) + ".json")
                        return ', –≤–∞—à –±–æ–Ω—É—Å: ' + str(BonusCoin) + '‡∏ø! üòÑ'
                elif group == 'Premium':
                    random_bonus = random.randint(1, 2)
                    if random_bonus == 1:
                        BonusMoney = int(random.randint(25000, 55000))
                        user_balance = int(get_data['balance'])
                        get_data = gf.loadjson(users_dir + str(id) + ".json")
                        goBonus = user_balance + BonusMoney
                        get_data.update({"balance": '{}'.format(goBonus)})
                        get_data.update({"bonus_timer": '{}'.format(time.time() + int(bonus_time(id)))})
                        gf.dumpjson(get_data, users_dir + str(id) + ".json")
                        return ', –≤–∞—à –±–æ–Ω—É—Å: ' + str(BonusMoney) + '‚Ç¨! üòÑ'
                    else:
                        BonusCoin = int(random.randint(25, 55))
                        user_coin_balance = int(get_data['bank_cr_balance'])
                        get_data = gf.loadjson(users_dir + str(id) + ".json")
                        goBonus = user_coin_balance + BonusCoin
                        get_data.update({"bank_cr_balance": '{}'.format(goBonus)})
                        get_data.update({"bonus_timer": '{}'.format(time.time() + int(bonus_time(id)))})
                        gf.dumpjson(get_data, users_dir + str(id) + ".json")
                        return ', –≤–∞—à –±–æ–Ω—É—Å: ' + str(BonusCoin) + '‡∏ø! üòÑ'
            else:
                get_data = gf.loadjson(users_dir + str(id) + ".json")
                rasnica = float(get_data['bonus_timer']) - time.time()
                return ', –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑: ' + str(datetime.strftime(datetime.utcfromtimestamp(rasnica), '%H:%M:%S')) + ' ‚ò∫'

        elif '–ø–µ—Ä–µ–≤–æ–¥' == sourceText.split()[0].lower():
            if len(sourceText.split()) > 2:
                perevodToId = str(gf.removeLink(sourceText.split()[1].lower()))
                summa_perevoda = sourceText.split()[2].lower()
                if summa_perevoda.isdigit() and perevodToId.isdigit():
                    if perevodToId != id:
                        get_data = gf.loadjson(users_dir + str(id) + ".json")
                        balan—Åe_out = get_data['balance']

                        check_profile = os.path.exists(users_dir + str(perevodToId) + ".json")
                        if check_profile == True:
                            if int(summa_perevoda) <= int(get_data['balance']):
                                get_data = gf.loadjson(users_dir + str(id) + ".json")
                                goBonus = int(get_data['balance']) - int(summa_perevoda)
                                get_data.update({"balance": '{}'.format(str(goBonus))})
                                users_otID_name = get_data['first_name'] + ' ' + get_data['last_name']
                                gf.dumpjson(get_data, users_dir + str(id) + ".json")
                                balan—Åe_out = get_data['balance']

                                get_data = gf.loadjson(users_dir + str(perevodToId) + ".json")
                                goBonus = int(get_data['balance']) + int(summa_perevoda)
                                get_data.update({"balance": '{}'.format(str(goBonus))})
                                users_toID_name = get_data['first_name'] + ' ' + get_data['last_name']
                                users_toID_balance = get_data['balance']
                                gf.dumpjson(get_data, users_dir + str(perevodToId) + ".json")
                                gf.sendMessageTOid(', –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç: ' + str(users_otID_name) + ' –Ω–∞ —Å—É–º–º—É ' + str(summa_perevoda) + '‚Ç¨ üòØ\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ' + str(users_toID_balance) + '‚Ç¨', perevodToId)
                                return ', –≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ' + str(users_toID_name) + ' - ' + str(summa_perevoda) + '‚Ç¨ üòØ\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ' + str(balan—Åe_out) + '‚Ç¨'
                            else:
                                return ', —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞! üòî\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ' + str(balan—Åe_out) + '‚Ç¨'
                        else:
                            return ', —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! üòî'
                    else:
                        return ', –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ - –Ω–µ–ª—å–∑—è! üòî'
                else:
                    return ', –±—É–∫–≤—ã –∏ —Å–∏–º–≤–æ–ª—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã! üòï\nü§ù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ¬´–ü–µ—Ä–µ–≤–æ–¥ [ID –∏–≥—Ä–æ–∫–∞] [—Å—É–º–º–∞]¬ª'
            else:
                return ', –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É —Å –±–∞–ª–∞–Ω—Å–∞ - –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É! üòâ\nü§ù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ¬´–ü–µ—Ä–µ–≤–æ–¥ [ID –∏–≥—Ä–æ–∫–∞] [—Å—É–º–º–∞]¬ª'
        else:
            return None
    pass
